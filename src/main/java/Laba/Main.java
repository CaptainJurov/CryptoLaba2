package Laba;

import java.math.BigInteger;

public class Main {
    private static CryptoLibrary.ShamirCipher shamir;
    private static CryptoLibrary.ElGamalCipher elGamal;
    private static CryptoLibrary.VernamCipher vernam;
    private static CryptoLibrary.RSACipher rsa;
    public static final String RESET = "\u001B[0m";
    public static final String PINK = "\u001B[95m";
    public static final String BRIGHT_PINK = "\u001B[95;1m";
    public static final String LIGHT_PINK = "\u001B[38;5;218m";
    public static final String WHITE = "\u001B[97m";
    public static final String BRIGHT_WHITE = "\u001B[97;1m";

    public static final String HEART = "üíñ";
    public static final String STAR = "‚ú®";
    public static final String SPARKLES = "üåü";
    public static final String FLOWER = "üå∏";
    public static final String BLOSSOM = "üíÆ";

    public static void main(String[] args) {
        printWelcome();
        initializeAlgorithms();
        BigInteger[] kawaiiNumbers = {
                BigInteger.valueOf(42),      // –û—Ç–≤–µ—Ç –Ω–∞ –≤—Å—ë
                BigInteger.valueOf(777),     // –°—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ
                BigInteger.valueOf(100),     // –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ
                BigInteger.valueOf(255)      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–π—Ç
        };
        for (int i = 0; i < kawaiiNumbers.length; i++) {
            printTestHeader(i + 1, kawaiiNumbers[i]);

            processShamir(kawaiiNumbers[i]);
            processElGamal(kawaiiNumbers[i]);
            processVernam(kawaiiNumbers[i]);
            processRSA(kawaiiNumbers[i]);
        }
        showAllKeys();
        runFinalTests();
        printGoodbye();
    }

    private static void printWelcome() {
        System.out.println(BRIGHT_PINK);
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë  " + HEART + "  –ù—è—à–Ω–∞—è –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ü—Ä–æ–≥—Ä–∞–º–º–∞  " + HEART + "  ‚ïë");
        System.out.println("‚ïë         –®–∏—Ñ—Ä—É–µ–º –≤—Å—ë —Ä–æ–∑–æ–≤–µ–Ω—å–∫–∏–º! " + FLOWER + "         ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.println(RESET);
    }

    private static void printGoodbye() {
        System.out.println(BRIGHT_PINK);
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë  " + SPARKLES + "  –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!  " + SPARKLES + "  ‚ïë");
        System.out.println("‚ïë      –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –Ω—è—à–Ω–æ—Å—Ç—å—é! " + BLOSSOM + "      ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.println(RESET);
    }

    private static void printTestHeader(int testNum, BigInteger number) {
        System.out.println(LIGHT_PINK);
        System.out.println("‚ù§Ô∏è ".repeat(15));
        System.out.println(FLOWER + "  –¢–µ—Å—Ç–∏–∫ ‚Ññ" + testNum + " - –ß–∏—Å–ª–æ: " + BRIGHT_WHITE + number + LIGHT_PINK + "  " + FLOWER);
        System.out.println("‚ù§Ô∏è ".repeat(15));
        System.out.println(RESET);
    }

    private static void initializeAlgorithms() {
        int bitLength = 64;

        try {
            shamir = new CryptoLibrary.ShamirCipher(bitLength);
            elGamal = new CryptoLibrary.ElGamalCipher(bitLength);
            vernam = new CryptoLibrary.VernamCipher(bitLength);
            rsa = new CryptoLibrary.RSACipher(bitLength);

            System.out.println(PINK + STAR + " –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –¥–ª–∏–Ω–æ–π –∫–ª—é—á–∞ " +
                    BRIGHT_WHITE + bitLength + PINK + " –±–∏—Ç " + STAR + RESET);
        } catch (Exception e) {
            System.out.println(PINK + "üíî –û—à–∏–±–æ—á–∫–∞: " + e.getMessage() + RESET);
        }
    }

    private static void processShamir(BigInteger number) {
        System.out.println(LIGHT_PINK + "üîê –®–∏—Ñ—Ä –®–∞–º–∏—Ä–∞:" + RESET);
        try {
            CryptoLibrary.CryptoResult encrypted = shamir.encrypt(number);
            BigInteger decrypted = shamir.decrypt(encrypted);

            System.out.println(WHITE + "   –ò—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ: " + BRIGHT_WHITE + number + RESET);
            System.out.println(PINK + "   –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ: " + LIGHT_PINK + encrypted.values[0] + RESET);
            System.out.println(WHITE + "   –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ: " + BRIGHT_WHITE + decrypted + RESET);

            boolean success = number.equals(decrypted);
            String status = success ?
                    BRIGHT_PINK + "üíñ –£—Å–ø–µ—à–Ω–æ!" + RESET :
                    PINK + "üíî –û—à–∏–±–æ—á–∫–∞" + RESET;
            System.out.println("   –†–µ–∑—É–ª—å—Ç–∞—Ç: " + status);
        } catch (Exception e) {
            System.out.println(PINK + "   üíî –û—à–∏–±–æ—á–∫–∞ –≤ –®–∞–º–∏—Ä–µ: " + e.getMessage() + RESET);
        }
    }

    private static void processElGamal(BigInteger number) {
        System.out.println(LIGHT_PINK + "üîê –®–∏—Ñ—Ä –≠–ª—å-–ì–∞–º–∞–ª—è:" + RESET);
        try {
            CryptoLibrary.CryptoResult encrypted = elGamal.encrypt(number);
            BigInteger decrypted = elGamal.decrypt(encrypted);

            System.out.println(WHITE + "   –ò—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ: " + BRIGHT_WHITE + number + RESET);
            System.out.println(PINK + "   –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:" + RESET);
            System.out.println(LIGHT_PINK + "     a: " + encrypted.values[0] + RESET);
            System.out.println(LIGHT_PINK + "     b: " + encrypted.values[1] + RESET);
            System.out.println(WHITE + "   –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ: " + BRIGHT_WHITE + decrypted + RESET);

            boolean success = number.equals(decrypted);
            String status = success ?
                    BRIGHT_PINK + "üíñ –£—Å–ø–µ—à–Ω–æ!" + RESET :
                    PINK + "üíî –û—à–∏–±–æ—á–∫–∞" + RESET;
            System.out.println("   –†–µ–∑—É–ª—å—Ç–∞—Ç: " + status);
        } catch (Exception e) {
            System.out.println(PINK + "   üíî –û—à–∏–±–æ—á–∫–∞ –≤ –≠–ª—å-–ì–∞–º–∞–ª–µ: " + e.getMessage() + RESET);
        }
    }

    private static void processVernam(BigInteger number) {
        System.out.println(LIGHT_PINK + "üîê –®–∏—Ñ—Ä –í–µ—Ä–Ω–∞–º–∞:" + RESET);
        try {
            CryptoLibrary.CryptoResult encrypted = vernam.encrypt(number);
            BigInteger decrypted = vernam.decrypt(encrypted);

            System.out.println(WHITE + "   –ò—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ: " + BRIGHT_WHITE + number + RESET);
            System.out.println(PINK + "   –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á–∏–∫: " + LIGHT_PINK + vernam.getKey() + RESET);
            System.out.println(PINK + "   –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ: " + LIGHT_PINK + encrypted.values[0] + RESET);
            System.out.println(WHITE + "   –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ: " + BRIGHT_WHITE + decrypted + RESET);

            boolean success = number.equals(decrypted);
            String status = success ?
                    BRIGHT_PINK + "üíñ –£—Å–ø–µ—à–Ω–æ!" + RESET :
                    PINK + "üíî –û—à–∏–±–æ—á–∫–∞" + RESET;
            System.out.println("   –†–µ–∑—É–ª—å—Ç–∞—Ç: " + status);
        } catch (Exception e) {
            System.out.println(PINK + "   üíî –û—à–∏–±–æ—á–∫–∞ –≤ –í–µ—Ä–Ω–∞–º–µ: " + e.getMessage() + RESET);
        }
    }

    private static void processRSA(BigInteger number) {
        System.out.println(LIGHT_PINK + "üîê –®–∏—Ñ—Ä RSA:" + RESET);
        try {
            CryptoLibrary.CryptoResult encrypted = rsa.encrypt(number);
            BigInteger decrypted = rsa.decrypt(encrypted);

            System.out.println(WHITE + "   –ò—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ: " + BRIGHT_WHITE + number + RESET);
            System.out.println(PINK + "   –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ: " + LIGHT_PINK + encrypted.values[0] + RESET);
            System.out.println(WHITE + "   –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ: " + BRIGHT_WHITE + decrypted + RESET);

            boolean success = number.equals(decrypted);
            String status = success ?
                    BRIGHT_PINK + "üíñ –£—Å–ø–µ—à–Ω–æ!" + RESET :
                    PINK + "üíî –û—à–∏–±–æ—á–∫–∞" + RESET;
            System.out.println("   –†–µ–∑—É–ª—å—Ç–∞—Ç: " + status);
        } catch (Exception e) {
            System.out.println(PINK + "   üíî –û—à–∏–±–æ—á–∫–∞ –≤ RSA: " + e.getMessage() + RESET);
        }
    }

    private static void showAllKeys() {
        System.out.println(BRIGHT_PINK);
        System.out.println("\n" + FLOWER + " –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏–∫–∏ " + FLOWER);
        System.out.println("üå∏".repeat(20));
        System.out.println(RESET);

        System.out.println(LIGHT_PINK + "üìä –®–∏—Ñ—Ä –®–∞–º–∏—Ä–∞:" + RESET);
        System.out.println(WHITE + "   p:  " + LIGHT_PINK + shamir.getP() + RESET);
        System.out.println(WHITE + "   ca: " + LIGHT_PINK + shamir.getCa() + RESET);
        System.out.println(WHITE + "   da: " + LIGHT_PINK + shamir.getDa() + RESET);
        System.out.println(WHITE + "   cb: " + LIGHT_PINK + shamir.getCb() + RESET);
        System.out.println(WHITE + "   db: " + LIGHT_PINK + shamir.getDb() + RESET);

        System.out.println(LIGHT_PINK + "\nüìä –®–∏—Ñ—Ä –≠–ª—å-–ì–∞–º–∞–ª—è:" + RESET);
        System.out.println(WHITE + "   p: " + LIGHT_PINK + elGamal.getP() + RESET);
        System.out.println(WHITE + "   g: " + LIGHT_PINK + elGamal.getG() + RESET);
        System.out.println(WHITE + "   y: " + LIGHT_PINK + elGamal.getY() + RESET);
        System.out.println(WHITE + "   x: " + LIGHT_PINK + elGamal.getX() + RESET);

        System.out.println(LIGHT_PINK + "\nüìä –®–∏—Ñ—Ä –í–µ—Ä–Ω–∞–º–∞:" + RESET);
        System.out.println(WHITE + "   –ö–ª—é—á–∏–∫: " + LIGHT_PINK + vernam.getKey() + RESET);

        System.out.println(LIGHT_PINK + "\nüìä –®–∏—Ñ—Ä RSA:" + RESET);
        System.out.println(WHITE + "   n: " + LIGHT_PINK + rsa.getN() + RESET);
        System.out.println(WHITE + "   e: " + LIGHT_PINK + rsa.getE() + RESET);
        System.out.println(WHITE + "   d: " + LIGHT_PINK + rsa.getD() + RESET);
        System.out.println(WHITE + "   p: " + LIGHT_PINK + rsa.getP() + RESET);
        System.out.println(WHITE + "   q: " + LIGHT_PINK + rsa.getQ() + RESET);
    }

    private static void runFinalTests() {
        System.out.println(BRIGHT_PINK);
        System.out.println("\n" + SPARKLES + " –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ " + SPARKLES);
        System.out.println("‚ú®".repeat(20));
        System.out.println(RESET);

        BigInteger[] testNumbers = {
                BigInteger.valueOf(1),
                BigInteger.valueOf(13),
                BigInteger.valueOf(99),
                BigInteger.valueOf(512)
        };

        int totalTests = 0;
        int successfulTests = 0;

        for (BigInteger testNumber : testNumbers) {
            System.out.println(WHITE + "üî¢ –¢–µ—Å—Ç–æ–≤–æ–µ —á–∏—Å–ª–æ: " + BRIGHT_WHITE + testNumber + RESET);
            try {
                CryptoLibrary.CryptoResult shamirResult = shamir.encrypt(testNumber);
                BigInteger shamirDecrypted = shamir.decrypt(shamirResult);
                boolean shamirSuccess = testNumber.equals(shamirDecrypted);
                String shamirStatus = shamirSuccess ?
                        BRIGHT_PINK + "üíñ –£—Å–ø–µ—à–Ω–æ!" + RESET :
                        PINK + "üíî –û—à–∏–±–æ—á–∫–∞" + RESET;
                System.out.println(PINK + "   –®–∞–º–∏—Ä: " + shamirStatus + RESET);
                if (shamirSuccess) successfulTests++;
            } catch (Exception e) {
                System.out.println(PINK + "   –®–∞–º–∏—Ä: üíî –û—à–∏–±–æ—á–∫–∞ - " + e.getMessage() + RESET);
            }
            totalTests++;
            try {
                CryptoLibrary.CryptoResult elGamalResult = elGamal.encrypt(testNumber);
                BigInteger elGamalDecrypted = elGamal.decrypt(elGamalResult);
                boolean elGamalSuccess = testNumber.equals(elGamalDecrypted);
                String elGamalStatus = elGamalSuccess ?
                        BRIGHT_PINK + "üíñ –£—Å–ø–µ—à–Ω–æ!" + RESET :
                        PINK + "üíî –û—à–∏–±–æ—á–∫–∞" + RESET;
                System.out.println(PINK + "   –≠–ª—å-–ì–∞–º–∞–ª—å: " + elGamalStatus + RESET);
                if (elGamalSuccess) successfulTests++;
            } catch (Exception e) {
                System.out.println(PINK + "   –≠–ª—å-–ì–∞–º–∞–ª—å: üíî –û—à–∏–±–æ—á–∫–∞ - " + e.getMessage() + RESET);
            }
            totalTests++;
            try {
                CryptoLibrary.CryptoResult vernamResult = vernam.encrypt(testNumber);
                BigInteger vernamDecrypted = vernam.decrypt(vernamResult);
                boolean vernamSuccess = testNumber.equals(vernamDecrypted);
                String vernamStatus = vernamSuccess ?
                        BRIGHT_PINK + "üíñ –£—Å–ø–µ—à–Ω–æ!" + RESET :
                        PINK + "üíî –û—à–∏–±–æ—á–∫–∞" + RESET;
                System.out.println(PINK + "   –í–µ—Ä–Ω–∞–º: " + vernamStatus + RESET);
                if (vernamSuccess) successfulTests++;
            } catch (Exception e) {
                System.out.println(PINK + "   –í–µ—Ä–Ω–∞–º: üíî –û—à–∏–±–æ—á–∫–∞ - " + e.getMessage() + RESET);
            }
            totalTests++;
            try {
                CryptoLibrary.CryptoResult rsaResult = rsa.encrypt(testNumber);
                BigInteger rsaDecrypted = rsa.decrypt(rsaResult);
                boolean rsaSuccess = testNumber.equals(rsaDecrypted);
                String rsaStatus = rsaSuccess ?
                        BRIGHT_PINK + "üíñ –£—Å–ø–µ—à–Ω–æ!" + RESET :
                        PINK + "üíî –û—à–∏–±–æ—á–∫–∞" + RESET;
                System.out.println(PINK + "   RSA: " + rsaStatus + RESET);
                if (rsaSuccess) successfulTests++;
            } catch (Exception e) {
                System.out.println(PINK + "   RSA: üíî –û—à–∏–±–æ—á–∫–∞ - " + e.getMessage() + RESET);
            }
            totalTests++;
        }

        printFinalStats(totalTests, successfulTests);
    }

    private static void printFinalStats(int totalTests, int successfulTests) {
        int failedTests = totalTests - successfulTests;
        double successRate = (double) successfulTests / totalTests * 100;

        System.out.println(BRIGHT_PINK);
        System.out.println("\n" + HEART + " –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è " + HEART);
        System.out.println("üíï".repeat(20));

        System.out.println(WHITE + "   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: " + BRIGHT_WHITE + totalTests + RESET);
        System.out.println(PINK + "   –£—Å–ø–µ—à–Ω—ã—Ö: " + BRIGHT_PINK + successfulTests + RESET);
        System.out.println(PINK + "   –ù–µ—É–¥–∞—á–Ω—ã—Ö: " + (failedTests > 0 ? PINK : BRIGHT_PINK) + failedTests + RESET);

        String rateColor = successRate == 100 ? BRIGHT_PINK : PINK;
        System.out.println(WHITE + "   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: " + rateColor + String.format("%.1f%%", successRate) + RESET);

        if (successRate == 100) {
            System.out.println(BRIGHT_PINK + "   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –¢–∞–∫ –º–∏–ª–æ! " + HEART + RESET);
        } else if (successRate >= 80) {
            System.out.println(PINK + "   üå∏ –ü–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ! –ï—Å—Ç—å –º–µ–ª–∫–∏–µ –æ—à–∏–±–æ—á–∫–∏" + RESET);
        } else {
            System.out.println(PINK + "   üíî –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –º—ã —Å–ø—Ä–∞–≤–∏–º—Å—è!" + RESET);
        }

        System.out.println("üíï".repeat(20));
        System.out.println(RESET);
    }
}